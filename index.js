// Generated by CoffeeScript 2.4.1
// Mixin definition
var indexOf = [].indexOf;
export default {
  // Public interface
  props: {
    // Add listeners and check if in viewport immediately
    inViewportActive: {
      type: Boolean,
      default: true
    },
    // Only update once by default. The assumption is that it will be used for
    // one-time buildins
    inViewportOnce: {
      type: Boolean,
      default: false
    },
    // The IntersectionObserver root margin adds offsets to when the now and 
    // fully get updated
    inViewportRootMargin: {
      type: Number | String,
      default: void 0
    },
    // Specify the IntersectionObserver root to use.
    inViewportRoot: {
      type: String | Function | Object,
      default: void 0
    },
    // The IntersectionObserver threshold defines the intersection ratios that
    // fire the observer callback
    inViewportThreshold: {
      type: Number | Array,
      default: function () {
        return [0, 1 // Fire on enter/leave and fully enter/leave
        ];
      }
    }
  },
  // Bindings that are used by the host component
  data: function () {
    return {
      inViewport: {
        // Public props
        now: null,
        // Is in viewport
        fully: null,
        // Is fully in viewport
        above: null,
        // Is partially or fully above the viewport
        below: null,
        // Is partially or fully below the viewport
        // Internal props
        listening: false,
        maxThreshold: 1
      }
    };
  },
  // Lifecycle hooks
  mounted: function () {
    return this.$nextTick(this.inViewportInit);
  },
  destroyed: function () {
    return this.removeInViewportHandlers();
  },
  computed: {
    // Add the maxThreshold to the @inViewportThreshold prop so that the handler
    // is fired for elements that are talled than the viewport
    inViewportThresholdWithMax: function () {
      var ref, threshold; // Support number and array thresholds

      threshold = typeof this.inViewportThreshold === 'object' ? this.inViewportThreshold : [this.inViewportThreshold]; // Add only if not already in the threshold list

      if (ref = this.inViewport.maxThreshold, indexOf.call(threshold, ref) >= 0) {
        return threshold;
      } else {
        return threshold.concat(this.inViewport.maxThreshold);
      }
    }
  },
  // Watch props and data
  watch: {
    // Add or remove event handlers handlers
    inViewportActive: function (active) {
      if (active) {
        return this.addInViewportHandlers();
      } else {
        return this.removeInViewportHandlers();
      }
    },
    // If any of the Observer options change, re-init
    inViewportRootMargin: function () {
      return this.reInitInViewportMixin();
    },
    inViewportRoot: function () {
      return this.reInitInViewportMixin();
    },
    inViewportThresholdWithMax: function () {
      return this.reInitInViewportMixin();
    }
  },
  // Public API
  methods: {
    // Re-init
    reInitInViewportMixin: function () {
      this.removeInViewportHandlers();
      return this.inViewportInit();
    },
    // Instantiate
    inViewportInit: function () {
      if (this.inViewportActive) {
        return this.addInViewportHandlers();
      }
    },
    // Add listeners
    addInViewportHandlers: function () {
      // Don't add twice
      if (this.inViewport.listening) {
        return;
      }

      this.inViewport.listening = true; // Create IntersectionObserver instance

      this.inViewportObserver = new IntersectionObserver(this.updateInViewport, {
        root: function () {
          switch (typeof this.inViewportRoot) {
            case 'function':
              return this.inViewportRoot();

            case 'string':
              return document.querySelector(this.inViewportRoot);

            case 'object':
              return this.inViewportRoot;
            // Expects to be a DOMElement

            default:
              return void 0;
          }
        }.call(this),
        rootMargin: this.inViewportRootMargin,
        threshold: this.inViewportThresholdWithMax
      }); // Start listening

      return this.inViewportObserver.observe(this.$el);
    },
    // Remove listeners
    removeInViewportHandlers: function () {
      var ref; // Don't remove twice

      if (!this.inViewport.listening) {
        return;
      }

      this.inViewport.listening = false; // Destroy instance, which also removes listeners

      if ((ref = this.inViewportObserver) != null) {
        ref.disconnect();
      }

      return delete this.inViewportObserver;
    },
    // Handle state changes from scrollMonitor.  There should only ever be one
    // entry
    updateInViewport: function ([entry]) {
      // Get the maximum threshold ratio, which is less than 1 when the
      // element is taller than the viewport
      this.inViewport.maxThreshold = Math.min(1, entry.rootBounds.height / entry.boundingClientRect.height); // Update state values. It was necessary to include "or equal to" here
      // because the threshold trigger fires when the sites may equal each other.
      // Without this, the appeared stuck when the two tops (for instance) were
      // exactly equal.

      this.inViewport.now = entry.isIntersecting;
      this.inViewport.fully = entry.intersectionRatio >= this.inViewport.maxThreshold;
      this.inViewport.above = entry.boundingClientRect.top <= entry.rootBounds.top;
      this.inViewport.below = entry.boundingClientRect.bottom >= entry.rootBounds.bottom;

      if (this.inViewportOnce && this.inViewport.now) {
        // If set to update "once", remove listeners if in viewport
        return this.removeInViewportHandlers();
      }
    }
  }
};